variables:
  PROJECT_NAME: 'ryanlong/bioloop'

stages:
  - build
  - lint
  - test
  - tag
  - deploy
  # - docs

build:
  stage: build
  tags: ['builddev-shell']
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin <<<$CI_REGISTRY_PASSWORD
  script:
    - cd nginx/
    - docker build -t $CI_REGISTRY/$PROJECT_NAME/nginx:test .
    - docker push $CI_REGISTRY/$PROJECT_NAME/nginx:test
    - cd ../api/
    - docker build -t $CI_REGISTRY/$PROJECT_NAME/api:test .
    - docker push $CI_REGISTRY/$PROJECT_NAME/api:test
    - cd ../ui/
    - docker build -t $CI_REGISTRY/$PROJECT_NAME/ui:test .
    - docker push $CI_REGISTRY/$PROJECT_NAME/ui:test
    - cd ../tests/
    - docker build -t $CI_REGISTRY/$PROJECT_NAME/e2e:test .
    - docker push $CI_REGISTRY/$PROJECT_NAME/e2e:test


lint-api:
  tags: ['builddev-docker']
  image: '$CI_REGISTRY/$PROJECT_NAME/api:test'
  stage: lint
  script:
    - cd /opt/sca/app
    - npm run lint

lint-ui:
  tags: ['builddev-docker']
  image: $CI_REGISTRY/$PROJECT_NAME/ui:test
  stage: lint
  script:
    - cd /opt/sca/app
    - npm run lint

test-migrations:
  tags: ['builddev-shell']
  environment:
    name: testing
  stage: test
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY 
  script:
    # Setup rhythm_api
    - git clone https://github.com/IUSCA/rhythm_api.git
    - cd rhythm_api/keys/
    - ./genkeys.sh
    - cd ../../tests/
    # Generate all the environment vars specified in .env.examples using gitlab environment vars values
    - bin/generate_env.sh 
    - bin/generate_rhythm_env.sh
    - docker compose down 
    - docker compose pull && docker compose  up -d --force-recreate --remove-orphans
    # Setup the appropriate token for communication with the workers and rhythm_api
    - sed -i '/^WORKFLOW_AUTH_TOKEN/d' api.env
    - echo "WORKFLOW_AUTH_TOKEN=$(docker compose exec rhythm python -m rhythm_api.scripts.issue_token --sub bioloop-dev.sca.iu.edu)" >> api.env
    - sed -i '/^APP_API_TOKEN/d' workers.env
    - echo "APP_API_TOKEN=$(docker compose exec api node src/scripts/issue_token.js svc_tasks" >> workers.env
    - docker compose exec api npx prisma migrate deploy
    - docker compose down
    - docker run --rm -v $CI_PROJECT_DIR:$CI_PROJECT_DIR bash rm -rf $CI_PROJECT_DIR/*

test-e2e:
  tags: ['builddev-shell']
  environment:
    name: testing
  stage: test
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY 
  script:
    # Generate all the environment vars specified in .env.examples using gitlab environment vars values
    - cd tests/
    - bin/generate_env.sh 
    # Setup the test environment
    - docker compose down
    - docker compose pull
    - docker compose up -d --force-recreate --remove-orphans 
    # Setup api container
    - docker compose exec api npx prisma migrate deploy 
    - docker compose exec api npx prisma db seed 
    - docker compose logs -t
    - docker compose exec e2e npm run test
    - docker compose down
    

tag:
  tags: ['builddev-shell']
  stage: tag
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY 
  script:
    - tag=$(git rev-parse @)
    - docker tag $CI_REGISTRY/$PROJECT_NAME/api:test $CI_REGISTRY/$PROJECT_NAME/api:$tag
    - docker push $CI_REGISTRY/$PROJECT_NAME/api:$tag
    - docker tag $CI_REGISTRY/$PROJECT_NAME/api:test $CI_REGISTRY/$PROJECT_NAME/api:latest
    - docker push $CI_REGISTRY/$PROJECT_NAME/api:latest
    - docker tag $CI_REGISTRY/$PROJECT_NAME/ui:test $CI_REGISTRY/$PROJECT_NAME/ui:$tag
    - docker push $CI_REGISTRY/$PROJECT_NAME/ui:$tag
    - docker tag $CI_REGISTRY/$PROJECT_NAME/ui:test $CI_REGISTRY/$PROJECT_NAME/ui:latest
    - docker push $CI_REGISTRY/$PROJECT_NAME/ui:latest
    - docker tag $CI_REGISTRY/$PROJECT_NAME/nginx:test $CI_REGISTRY/$PROJECT_NAME/nginx:$tag
    - docker push $CI_REGISTRY/$PROJECT_NAME/nginx:$tag
    - docker tag $CI_REGISTRY/$PROJECT_NAME/nginx:test $CI_REGISTRY/$PROJECT_NAME/nginx:latest
    - docker push $CI_REGISTRY/$PROJECT_NAME/nginx:latest
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master"'
      when: always
    - when: never


#Release per deployment -using a runner on each environment
deploy_test_app:
  tags: ['buildtest-shell']
  environment:
    name: release
  stage: deploy
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY 
  script:
    - cd deploy/ 
    - docker compose down # remove any existing containers/networks
    - docker compose pull && docker compose up -d --force-recreate --remove-orphans
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master"'
      when: always
    - when: never

# update_docs:
#   tags: ['builddev-docs']
#   stage: docs
#   script:
#     - npm install
#     - npm run docs:build
