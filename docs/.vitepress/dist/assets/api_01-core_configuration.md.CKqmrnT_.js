import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.C9SxlbOG.js";const k=JSON.parse('{"title":"Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"api/01-core/configuration.md","filePath":"api/01-core/configuration.md","lastUpdated":null}'),t={name:"api/01-core/configuration.md"};function o(l,i,p,r,h,d){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><p>The configuration system is a critical part of the application, enabling developers to manage environment-specific settings and maintain clean, maintainable code. It uses the <a href="https://github.com/node-config/node-config" target="_blank" rel="noreferrer">config module</a> to load and manage configuration files, ensuring that the application behaves consistently across different environments.</p><h2 id="purpose-of-the-configuration-system" tabindex="-1">Purpose of the Configuration System <a class="header-anchor" href="#purpose-of-the-configuration-system" aria-label="Permalink to &quot;Purpose of the Configuration System&quot;">​</a></h2><p>The configuration system exists to centralize and standardize the way application settings are managed. Without it, developers would need to hardcode settings or rely on ad-hoc methods to manage environment-specific configurations, leading to brittle and error-prone code.</p><p>By using this system:</p><ul><li>Developers can easily override settings for different environments (e.g., development, production).</li><li>Sensitive information, such as API keys and database credentials, can be securely managed using environment variables.</li><li>The application becomes easier to maintain and extend, as configuration logic is decoupled from the application logic.</li></ul><h2 id="how-it-fits-into-the-system" tabindex="-1">How It Fits Into the System <a class="header-anchor" href="#how-it-fits-into-the-system" aria-label="Permalink to &quot;How It Fits Into the System&quot;">​</a></h2><p>The configuration system integrates seamlessly with the application by:</p><ul><li>Loading settings from JSON files located in the <code>./config/</code> directory.</li><li>Allowing overrides via environment variables, command-line arguments, or external sources.</li><li>Providing a consistent API for accessing configuration values throughout the application.</li></ul><p>This ensures that all parts of the application use the same source of truth for configuration, reducing duplication and potential inconsistencies.</p><h2 id="configuration-files" tabindex="-1">Configuration Files <a class="header-anchor" href="#configuration-files" aria-label="Permalink to &quot;Configuration Files&quot;">​</a></h2><p>The following configuration files are used:</p><ul><li><code>default.json</code>: Contains default settings for the application.</li><li><code>{NODE_ENV}.json</code> (e.g., <code>production.json</code>): Contains environment-specific overrides.</li><li><code>custom-environment-variables.json</code>: Maps configuration properties to environment variables.</li></ul><h3 id="precedence-of-configuration" tabindex="-1">Precedence of Configuration <a class="header-anchor" href="#precedence-of-configuration" aria-label="Permalink to &quot;Precedence of Configuration&quot;">​</a></h3><p>The configuration system resolves settings in the following order of precedence:</p><ol><li>Command-line arguments</li><li>Environment variables</li><li><code>{NODE_ENV}.json</code> (e.g., <code>production.json</code>)</li><li><code>default.json</code></li></ol><p>This precedence ensures that the most specific settings are applied, while falling back to defaults when necessary.</p><h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h2><p>The application uses the <code>dotenv-safe</code> module to load environment variables from a <code>.env</code> file. This ensures that all required variables are defined and prevents runtime errors caused by missing configurations.</p><h3 id="example-env-file" tabindex="-1">Example <code>.env</code> File <a class="header-anchor" href="#example-env-file" aria-label="Permalink to &quot;Example \`.env\` File&quot;">​</a></h3><div class="language-env vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATABASE_PASSWORD=your_database_password</span></span>
<span class="line"><span>WORKFLOW_AUTH_TOKEN=your_auth_token</span></span>
<span class="line"><span>OAUTH_BASE_URL=https://example.com/oauth</span></span></code></pre></div><h3 id="loading-environment-variables" tabindex="-1">Loading Environment Variables <a class="header-anchor" href="#loading-environment-variables" aria-label="Permalink to &quot;Loading Environment Variables&quot;">​</a></h3><p>To load environment variables, the following code is used:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dotenv-safe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Ensure that a <code>.env.example</code> file exists to document required variables and their expected format.</p><h2 id="step-by-step-instructions-for-usage" tabindex="-1">Step-by-Step Instructions for Usage <a class="header-anchor" href="#step-by-step-instructions-for-usage" aria-label="Permalink to &quot;Step-by-Step Instructions for Usage&quot;">​</a></h2><ol><li><p><strong>Define Default Settings</strong>: Add default settings in <code>default.json</code> under the <code>./config/</code> directory. For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3030</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Add Environment-Specific Overrides</strong>: Create a file named <code>{NODE_ENV}.json</code> (e.g., <code>production.json</code>) and override specific settings:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Map Environment Variables</strong>: Use <code>custom-environment-variables.json</code> to map sensitive settings to environment variables:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EXPRESS_PORT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Create a <code>.env</code> File</strong>: Define the required environment variables in a <code>.env</code> file:</p><div class="language-env vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>EXPRESS_PORT=3030</span></span></code></pre></div></li><li><p><strong>Load Configuration in Code</strong>: Access configuration values in your application using the <code>config</code> module:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dotenv-safe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express.port&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Server running on port \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ol><p>foo bar</p>`,28)]))}const g=s(t,[["render",o]]);export{k as __pageData,g as default};
