import{_ as i,c as a,o as s,ag as o}from"./chunks/framework.C9SxlbOG.js";const k=JSON.parse('{"title":"Lifecycle Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"api/01-core/lifecycle-hooks.md","filePath":"api/01-core/lifecycle-hooks.md","lastUpdated":null}'),t={name:"api/01-core/lifecycle-hooks.md"};function n(l,e,r,c,p,h){return s(),a("div",null,e[0]||(e[0]=[o('<h1 id="lifecycle-hooks" tabindex="-1">Lifecycle Hooks <a class="header-anchor" href="#lifecycle-hooks" aria-label="Permalink to &quot;Lifecycle Hooks&quot;">​</a></h1><p>The lifecycle hooks in this project are designed to manage specific tasks during the application&#39;s lifecycle. These hooks ensure that critical operations are performed at the right time, such as during startup, shutdown, or before forking worker processes.</p><h2 id="location-of-lifecycle-hooks" tabindex="-1">Location of Lifecycle Hooks <a class="header-anchor" href="#location-of-lifecycle-hooks" aria-label="Permalink to &quot;Location of Lifecycle Hooks&quot;">​</a></h2><p>The lifecycle hooks are implemented in the file located at:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/core/lifecycle.js</span></span></code></pre></div><h3 id="etiquette-for-editing-updating-lifecycle-hooks" tabindex="-1">Etiquette for Editing/Updating Lifecycle Hooks <a class="header-anchor" href="#etiquette-for-editing-updating-lifecycle-hooks" aria-label="Permalink to &quot;Etiquette for Editing/Updating Lifecycle Hooks&quot;">​</a></h3><ul><li><strong>Do not add your function body to <code>lifecycle.js</code>.</strong></li><li>Instead, define new functions or logic in separate files/modules and call them from the respective lifecycle hook in <code>lifecycle.js</code>.</li><li>This approach ensures modularity, readability, and easier testing of individual components.</li></ul><p>For example:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define your logic in a separate file</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> customLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...custom logic...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Call it in the lifecycle hook</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onApplicationBootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> customLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="hooks-overview" tabindex="-1">Hooks Overview <a class="header-anchor" href="#hooks-overview" aria-label="Permalink to &quot;Hooks Overview&quot;">​</a></h2><h3 id="beforeapplicationfork" tabindex="-1"><code>beforeApplicationFork</code> <a class="header-anchor" href="#beforeapplicationfork" aria-label="Permalink to &quot;`beforeApplicationFork`&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Executes tasks that need to run in the master process before forking worker processes.</li><li><strong>Use Case</strong>: Perform one-time setup tasks such as generating Swagger documentation or registering cron jobs.</li><li><strong>Error Handling</strong>: Errors in this hook are logged, and the process exits if critical tasks fail.</li></ul><h3 id="onapplicationbootstrap" tabindex="-1"><code>onApplicationBootstrap</code> <a class="header-anchor" href="#onapplicationbootstrap" aria-label="Permalink to &quot;`onApplicationBootstrap`&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Executes tasks during the application bootstrap phase, typically after the application has started.</li><li><strong>Use Case</strong>: Log warnings or perform checks based on configuration settings.</li><li><strong>Error Handling</strong>: Errors in this hook are logged, and the process exits if critical tasks fail.</li></ul><h3 id="beforeapplicationshutdown" tabindex="-1"><code>beforeApplicationShutdown</code> <a class="header-anchor" href="#beforeapplicationshutdown" aria-label="Permalink to &quot;`beforeApplicationShutdown`&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Executes tasks in worker processes before the server shuts down.</li><li><strong>Use Case</strong>: Perform cleanup tasks or prepare the application for shutdown.</li><li><strong>Error Handling</strong>: Errors are logged, but the shutdown process continues.</li></ul><h3 id="onapplicationshutdown" tabindex="-1"><code>onApplicationShutdown</code> <a class="header-anchor" href="#onapplicationshutdown" aria-label="Permalink to &quot;`onApplicationShutdown`&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Executes tasks in worker processes after the server has shut down.</li><li><strong>Use Case</strong>: Final cleanup or logging after the application has fully stopped.</li><li><strong>Error Handling</strong>: Errors are logged, but the process exits regardless.</li></ul><h2 id="integration" tabindex="-1">Integration <a class="header-anchor" href="#integration" aria-label="Permalink to &quot;Integration&quot;">​</a></h2><p>These hooks are used in the application lifecycle to ensure proper initialization and cleanup. For example:</p><ul><li><code>beforeApplicationFork</code> is called in the master process before forking workers.</li><li><code>onApplicationBootstrap</code> is invoked during the startup phase.</li><li><code>beforeApplicationShutdown</code> and <code>onApplicationShutdown</code> are used during the shutdown process to handle cleanup tasks.</li></ul><p>By leveraging these hooks and following the guidelines for editing them, the application ensures a clean and predictable lifecycle management process.</p>',22)]))}const g=i(t,[["render",n]]);export{k as __pageData,g as default};
