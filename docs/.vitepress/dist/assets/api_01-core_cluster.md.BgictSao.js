import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.C9SxlbOG.js";const d=JSON.parse('{"title":"Cluster Management","description":"","frontmatter":{},"headers":[],"relativePath":"api/01-core/cluster.md","filePath":"api/01-core/cluster.md","lastUpdated":null}'),n={name:"api/01-core/cluster.md"};function l(r,s,o,h,p,c){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="cluster-management" tabindex="-1">Cluster Management <a class="header-anchor" href="#cluster-management" aria-label="Permalink to &quot;Cluster Management&quot;">​</a></h1><p>The <code>manage_cluster</code> function is a utility for managing a cluster of worker processes in a Node.js application. It provides features such as scaling, restart limits, and graceful shutdowns, making it easier to build robust and scalable applications.</p><p>This system is designed to efficiently manage multiple worker processes in a Node.js application. It leverages the <code>node:cluster</code> module to distribute workloads across available CPU cores, ensuring optimal utilization of system resources. This feature is particularly useful for high-performance applications that need to handle a large number of concurrent requests.</p><p>Without this system, the application would run as a single process, potentially underutilizing multi-core CPUs and becoming a bottleneck under heavy load.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The <code>manage_cluster</code> function allows you to:</p><ul><li>Run a master process to manage worker processes.</li><li>Define custom logic for both master and worker processes.</li><li>Automatically restart workers within configurable limits.</li><li>Gracefully shut down workers on receiving termination signals.</li></ul><h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h2><p>The function accepts an options object with the following properties:</p><ul><li><strong><code>master</code></strong>: A callback function to execute in the master process (optional).</li><li><strong><code>worker</code></strong>: A callback function to execute in each worker process (required).</li><li><strong><code>beforeApplicationFork</code></strong>: A callback function to execute before forking workers (optional).</li><li><strong><code>count</code></strong>: The number of worker processes to spawn (default: 2).</li><li><strong><code>max_restarts</code></strong>: Maximum number of worker restarts allowed within the interval (default: 3).</li><li><strong><code>max_restarts_interval</code></strong>: Time interval (in milliseconds) for the restart limit (default: 10000).</li><li><strong><code>grace</code></strong>: Grace period (in milliseconds) for workers to shut down gracefully (default: 5000).</li><li><strong><code>signals</code></strong>: List of signals to listen for to trigger shutdown (default: <code>[&#39;SIGINT&#39;, &#39;SIGTERM&#39;]</code>).</li></ul><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> manage_cluster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./core/cluster-manager&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">manage_cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  master</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Master process running&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Worker process running&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  max_restarts: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  max_restarts_interval: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  grace: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  signals: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SIGINT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SIGTERM&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SIGHUP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>In this example:</p><ul><li>The master process logs a message when it starts.</li><li>Each worker process logs a message every second.</li><li>The cluster spawns 4 workers and allows up to 5 restarts within a 15-second interval.</li><li>Workers are given 3 seconds to shut down gracefully when a termination signal is received.</li></ul><h2 id="metrics-integration" tabindex="-1">Metrics Integration <a class="header-anchor" href="#metrics-integration" aria-label="Permalink to &quot;Metrics Integration&quot;">​</a></h2><p>The master process can also expose aggregated metrics using the <code>prom-client</code> library. This is demonstrated in the <code>cluster.js</code> file, where a metrics server is set up to listen on a configurable port.</p><p>Refer to the <code>cluster.js</code> file for a complete example of integrating metrics with the cluster manager.</p>`,17)]))}const g=i(n,[["render",l]]);export{d as __pageData,g as default};
