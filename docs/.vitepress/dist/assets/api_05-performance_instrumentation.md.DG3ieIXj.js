import{_ as i,c as t,o as a,ag as e}from"./chunks/framework.C9SxlbOG.js";const k=JSON.parse('{"title":"Instrumentation","description":"","frontmatter":{},"headers":[],"relativePath":"api/05-performance/instrumentation.md","filePath":"api/05-performance/instrumentation.md","lastUpdated":null}'),n={name:"api/05-performance/instrumentation.md"};function l(o,s,r,h,p,d){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="instrumentation" tabindex="-1">Instrumentation <a class="header-anchor" href="#instrumentation" aria-label="Permalink to &quot;Instrumentation&quot;">​</a></h1><p>Instrumentation is the process of collecting and storing data about the performance of your application. This data can be used to identify performance bottlenecks, monitor the health of your application, and make informed decisions about how to improve performance.</p><p><code>prom-client</code> is a popular library for instrumenting Node.js applications with Prometheus metrics. It provides a simple and efficient way to collect metrics and expose them for monitoring and alerting.</p><h2 id="metrics-middleware" tabindex="-1">Metrics Middleware <a class="header-anchor" href="#metrics-middleware" aria-label="Permalink to &quot;Metrics Middleware&quot;">​</a></h2><p>The <code>metricsMiddleware</code> is a middleware function provided by the <code>express-prom-bundle</code> library. It is responsible for collecting HTTP request metrics, such as response times, status codes, and request paths. These metrics are exposed in a format compatible with Prometheus, enabling easy integration with monitoring systems.</p><h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p>The <code>metricsMiddleware</code> is configured in the <code>core/metrics.js</code> file. Key configurations include:</p><ul><li><strong>Autoregister</strong>: Automatically registers metrics unless clustering is enabled.</li><li><strong>Include Method</strong>: Captures the HTTP method (e.g., GET, POST).</li><li><strong>Include Path</strong>: Captures the request path.</li><li><strong>Normalize Path</strong>: Normalizes paths to avoid high cardinality (e.g., <code>/users/:id</code> instead of <code>/users/123</code>).</li><li><strong>Buckets</strong>: Defines histogram buckets for response times, ranging from 30ms to 30s.</li></ul><h3 id="metrics-collected" tabindex="-1">Metrics Collected <a class="header-anchor" href="#metrics-collected" aria-label="Permalink to &quot;Metrics Collected&quot;">​</a></h3><p>The middleware collects the following metrics:</p><ul><li><strong>HTTP Request Duration</strong>: Measures the time taken to process requests in a histogram format.</li><li><strong>HTTP Status Codes</strong>: Aggregates status codes into categories (e.g., <code>2xx</code>, <code>4xx</code>).</li><li><strong>Request Paths</strong>: Tracks metrics per normalized path.</li></ul><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># HELP http_request_duration_seconds duration histogram of http responses labeled with: status_code, method, path</span></span>
<span class="line"><span># TYPE http_request_duration_seconds histogram</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;0.03&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;0.1&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;0.3&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;1&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;3&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;10&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;30&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_bucket{le=&quot;+Inf&quot;,status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span>
<span class="line"><span>http_request_duration_seconds_sum{status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 0.038533292</span></span>
<span class="line"><span>http_request_duration_seconds_count{status_code=&quot;2xx&quot;,method=&quot;GET&quot;,path=&quot;/datasets/&quot;} 2</span></span></code></pre></div><p>Default metrics about node.js process are also collected. To view all metrics:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> locahost:9999/metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metrics.prom</span></span></code></pre></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><p>The middleware is added to the Express application in <code>app.js</code>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">metricsMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./core/metrics&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metricsMiddleware);</span></span></code></pre></div><p>This ensures that all incoming requests are automatically instrumented.</p><h2 id="custom-metrics" tabindex="-1">Custom Metrics <a class="header-anchor" href="#custom-metrics" aria-label="Permalink to &quot;Custom Metrics&quot;">​</a></h2><p><code>core/metrics.js</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authFailures</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auth_failures_total&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  help: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Total number of failed authentication attempts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  labelNames: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auth_method&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;reason&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client_id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Add your custom metric to the <code>metrics.js</code> file. This example creates a counter metric to track the total number of failed authentication attempts. You can define custom labels to provide additional context for the metric. This metric will be automatically registered and sent to the Prometheus server on every scrape.</p><h3 id="include-the-metric-in-your-code" tabindex="-1">Include the Metric in Your Code <a class="header-anchor" href="#include-the-metric-in-your-code" aria-label="Permalink to &quot;Include the Metric in Your Code&quot;">​</a></h3><p><code>services/authService.js</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../core/metrics&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> authenticateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isValidCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username, password)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metrics.authFailures.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ auth_method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reason: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;invalid_credentials&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, client_id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;web&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid credentials&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="clustered-metrics-aggregation" tabindex="-1">Clustered Metrics Aggregation <a class="header-anchor" href="#clustered-metrics-aggregation" aria-label="Permalink to &quot;Clustered Metrics Aggregation&quot;">​</a></h2><p>In a clustered environment, metrics from all worker processes are aggregated in the master process. This ensures that metrics are consistent and accessible from a single endpoint.</p><h3 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h3><p>The aggregation is implemented in <code>cluster.js</code>:</p><ul><li><strong>Master Process</strong>: Exposes the <code>/metrics</code> endpoint on a separate port for Prometheus to scrape aggregated metrics.</li><li><strong>Worker Processes</strong>: Collect metrics locally and send them to the master process.</li></ul><p>Example configuration in <code>cluster.js</code>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> promBundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express-prom-bundle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metricsApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/metrics&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, promBundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clusterMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>Without this setup, metrics would be fragmented across worker processes, making it difficult to monitor the entire system.</p><h3 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h3><ul><li>Centralized metrics collection in clustered environments.</li><li>Simplifies monitoring and alerting.</li><li>Ensures accurate and consistent metrics across all processes.</li></ul>`,35)]))}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
