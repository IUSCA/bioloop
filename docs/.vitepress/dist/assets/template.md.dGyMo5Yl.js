import{_ as s,c as i,o as a,V as e}from"./chunks/framework.Thz6RzJC.js";const u=JSON.parse('{"title":"Create a repository","description":"","frontmatter":{},"headers":[],"relativePath":"template.md","filePath":"template.md"}'),t={name:"template.md"},n=e(`<h1 id="create-a-repository" tabindex="-1">Create a repository <a class="header-anchor" href="#create-a-repository" aria-label="Permalink to &quot;Create a repository&quot;">​</a></h1><p>Fork this repo IUSCA/&lt;app_name&gt; (only the org owners can do this, ask Charles.)</p><p>Turn on issues in the new repo (only repo owners can do this, ask Charles.)</p><p>Clone repository</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">projec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Add bioloop as remote</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote add bioloop git@github.com:IUSCA/bioloop.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># to merge updates from bioloop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git fetch bioloop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git merge bioloop/main</span></span></code></pre></div><p>Replace the name &quot;bioloop&quot; with the new project name (&lt;app_name&gt;) in these files:</p><ul><li>docker-compose.yml and docker-compose-prod.yml: Change &quot;name&quot;</li><li>ui/src/config.js - Change &quot;appTitle&quot;</li><li>api/config/default.json and api/config/production.json: Change &quot;app_id&quot;, &quot;auth.jwt.iss&quot;</li><li>workers/workers/config/common.py: Change &quot;app_id&quot; and &quot;service_user&quot;</li><li>workers/workers/config/production.py and workers/workers/scripts/start_worker.sh: Change &quot;app_id&quot; and &quot;base_url&quot;</li><li>workers/ecosystem.config.js (line 7): change celery hostname and queues values</li><li>README.md and workers/README.md: replace the references to bioloop with &lt;app_name&gt;</li><li>Update content in <code>ui/src/pages/about.vue</code></li><li>Create custom logo.svg</li></ul><h2 id="steps-to-setup-api-and-run-natively-on-development-machine-not-using-docker" tabindex="-1">Steps to setup API and run natively on development machine (not using docker) <a class="header-anchor" href="#steps-to-setup-api-and-run-natively-on-development-machine-not-using-docker" aria-label="Permalink to &quot;Steps to setup API and run natively on development machine (not using docker)&quot;">​</a></h2><ul><li>Create .env file</li><li>Generate token signing key pair</li><li>Install dependencies</li><li>Generate API Doc</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example .env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keys</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./genkeys.sh</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install --save-dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run swagger</span></span></code></pre></div><p>This step is required only if you are working with workflows, otherwise you can set <code>WORKFLOW_AUTH_TOKEN</code> to any value and API calls to Rhythm API will fail but the App will still run.</p><p>Generate an access token to connect to the <a href="https://github.com/IUSCA/rhythm_api" target="_blank" rel="noreferrer">Rhythm API</a>.</p><ul><li>Go to Rhythm API instance (local or deployed)- <code>cd &lt;rhythm_api&gt;</code></li><li>If rhythm api is running locally: <code>python -m rhythm_api.scripts.issue_token --sub &lt;app-id&gt;</code></li><li>If rhythm api is running in docker: <code>sudo docker compose -f &quot;docker-compose-prod.yml&quot; exec api python -m rhythm_api.scripts.issue_token --sub &lt;app-id&gt;</code></li></ul><p>Make these changes to the api/.env file:</p><ul><li>set NODE_ENV to default (TODO: WARNING: NODE_ENV value of &#39;default&#39; is ambiguous. WARNING: See <a href="https://github.com/node-config/node-config/wiki/Strict-Mode" target="_blank" rel="noreferrer">https://github.com/node-config/node-config/wiki/Strict-Mode</a>)</li><li>Change the hostname in DATABASE_URL to localhost</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WORKFLOW_AUTH_TOKEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">toke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATABASE_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgresql://appuser:example@localhost:5432/app?schema=public&quot;</span></span></code></pre></div><ul><li>Initialize database</li><li>Set up schema</li><li>Populate with dummy data</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up -d postgres</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prisma db push</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prisma db seed</span></span></code></pre></div><p>Start the server: <code>npm run start</code></p><h2 id="steps-to-setup-ui-and-run-natively-on-development-machine-not-using-docker" tabindex="-1">Steps to setup UI and run natively on development machine (not using docker) <a class="header-anchor" href="#steps-to-setup-ui-and-run-natively-on-development-machine-not-using-docker" aria-label="Permalink to &quot;Steps to setup UI and run natively on development machine (not using docker)&quot;">​</a></h2><ul><li>Create .env file</li><li>Create self-signed certificate for <a href="https://localhost" target="_blank" rel="noreferrer">https://localhost</a></li><li>install dependencies</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example .env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .cert</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req -subj &#39;/CN=localhost&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:4096 -nodes -keyout ./.cert/key.pem -out ./.cert/cert.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install --save-dev</span></span></code></pre></div><p>Make these changes to ui/.env file:</p><ul><li>change the hostname in VITE_API_REDIRECT_URL to localhost</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VITE_API_REDIRECT_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://localhost:3030</span></span></code></pre></div><p>Start the vite server: <code>npm run dev</code></p><h2 id="set-up-workers-locally" tabindex="-1">Set Up Workers locally <a class="header-anchor" href="#set-up-workers-locally" aria-label="Permalink to &quot;Set Up Workers locally&quot;">​</a></h2><p>Running workers on your dev machine has limitations:</p><ul><li>Cannot work with SDA - cannot install <code>hsi</code> on dev machine.</li><li>Difficult to test with large files (~100GB)</li><li>Workers run external commands - <code>tar</code>, <code>fastqc</code>, <code>multiqc</code> whose interface and behavior may change between OS platforms.</li><li>Working with mounted file systems (Slate Scratch, and others) has its own quirks which you will not encounter on your dev machine.</li></ul><p>Steps:</p><ul><li><p>Install <a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noreferrer">miniconda</a></p></li><li><p>Create a virtual environment: <code>conda create -n colo python=3.9</code></p><ul><li>The production servers colo23, colo25 have python version 3.9.8 installed (as of June 2023). If the default python version in the production servers change, update it in your development machine too.</li></ul></li><li><p>Activate it: <code>conda activate colo</code></p></li><li><p>Install poetry - <code>pip install -U poetry</code></p></li><li><p>Install dependencies - <code>poetry install</code></p><ul><li>Poetry will detect it is running in a virtual environment and won&#39;t create another/</li></ul></li><li><p>Create .env</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> workers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example .env</span></span></code></pre></div><ul><li>Generate an auth token to access the app api and add it to .env against <code>AUTH_TOKEN</code>.</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/scripts/issue_token.js svc_tasks</span></span></code></pre></div><ul><li><p>Workers connect to the mongodb and rabbitmq of a Rhythm API instance. You can either <a href="https://github.com/IUSCA/rhythm_api" target="_blank" rel="noreferrer">setup a Rhythm API instance locally</a> or <s>connect to core-dev1.sca.iu.edu using Group VPN</s> (This option is not recommended as it is used for production now. We plan to use core.sca.iu.edu for production in the future.)</p></li><li><p>Update paths in config for local development: TODO</p></li><li><p>Stat celery:</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> workers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">workers/scripts/start_celery.sh</span></span></code></pre></div><h2 id="setup-a-test-instance-of-workers-in-colo-nodes" tabindex="-1">Setup a Test Instance of Workers in colo nodes <a class="header-anchor" href="#setup-a-test-instance-of-workers-in-colo-nodes" aria-label="Permalink to &quot;Setup a Test Instance of Workers in colo nodes&quot;">​</a></h2><p>There are no test instances of API, rhythm_api, mongo, postgres, queue running. These need to be run in local and port forwarded through ssh.</p><p><img src="https://github.com/IUSCA/bioloop/assets/1618149/7bf3fa0b-fff1-451a-8038-2a8e16910cca" alt="image"></p><ul><li>start postgres locally using docker</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up postgres -d</span></span></code></pre></div><ul><li>start rhythm_api locally</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rhythm_ap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up queue mongo -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run dev</span></span></code></pre></div><ul><li>start UI and API locally</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run start</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/ui</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run dev</span></span></code></pre></div><ul><li>Reverse port forward API, mongo and queue. let the clients on remote machine talk to a server running on the local machine. <ul><li>API - local port - 3030, remote port - 3130</li><li>Mongo - local port - 27017, remote port - 28017</li><li>queue - local port - 5672, remote port - 5772</li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3130</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:localhost:3030 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28017</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:localhost:27017 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5772</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:localhost:5672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bioloopuser@colo23.carbonate.uits.iu.edu</span></span></code></pre></div><ul><li>pull latest changes in dev branch to <code>&lt;bioloop_dev&gt;</code></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colo23&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app_de</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colo23&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git checkout dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colo23&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git pull</span></span></code></pre></div><ul><li><p>create / update <code>&lt;app_dev&gt;/workers/.env</code></p></li><li><p>create an auth token to communicate with the express server (postgres db)</p><ul><li><code>cd &lt;app&gt;/api</code></li><li><code>node src/scripts/issue_token.js &lt;service_account&gt;</code></li><li>ex: <code>node src/scripts/issue_token.js svc_tasks</code></li><li>docker ex: <code>sudo docker compose -f &quot;docker-compose-prod.yml&quot; exec api node src/scripts/issue_token.js svc_tasks</code></li></ul></li><li><p>install dependencies using poetry and start celery workers</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colo23&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd workers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colo23&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> poetry install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colo23&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> poetry shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colo23&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python -m celery -A workers.celery_app worker --loglevel INFO -O fair --pidfile celery_worker.pid --hostname &#39;bioloop-dev-celery-w1@%h&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --autoscale=2,1</span></span></code></pre></div>`,54),l=[n];function p(h,o,k,r,d,c){return a(),i("div",null,l)}const F=s(t,[["render",p]]);export{u as __pageData,F as default};
