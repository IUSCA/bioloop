generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dataset {
  id                 Int                 @id @default(autoincrement())
  name               String
  type               String
  num_directories    Int?
  num_files          Int?
  du_size            BigInt?
  size               BigInt?
  bundle_size        BigInt?
  description        String?
  created_at         DateTime            @default(now()) @db.Timestamp(6)
  updated_at         DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  origin_path        String?
  archive_path       String?
  staged_path        String?
  is_deleted         Boolean             @default(false)
  is_staged          Boolean             @default(false)
  metadata           Json?
  workflows          workflow[]
  files              dataset_file[]
  audit_logs         dataset_audit[]
  states             dataset_state[]
  derived_datasets   dataset_hierarchy[] @relation("source_datasets")
  source_datasets    dataset_hierarchy[] @relation("derived_datasets")
  projects           project_dataset[]
  accesses           data_access_log[]
  stage_requests     stage_request_log[]
  bundle             bundle?
  dataset_upload_log dataset_upload_log?

  @@unique([name, type, is_deleted])
}

model dataset_hierarchy {
  source_id       Int
  derived_id      Int
  assigned_at     DateTime @default(now()) @db.Timestamp(6)
  source_dataset  dataset  @relation(name: "source_datasets", fields: [source_id], references: [id], onDelete: Cascade)
  derived_dataset dataset  @relation(name: "derived_datasets", fields: [derived_id], references: [id], onDelete: Cascade)

  @@id([source_id, derived_id])
}

model dataset_file {
  id         Int                      @id @default(autoincrement())
  name       String?
  path       String
  md5        String?
  size       BigInt?
  filetype   String?
  metadata   Json?
  status     String?
  dataset_id Int
  dataset    dataset                  @relation(fields: [dataset_id], references: [id], onDelete: Cascade)
  parents    dataset_file_hierarchy[] @relation("child")
  children   dataset_file_hierarchy[] @relation("parent")
  accesses   data_access_log[]

  @@unique([path, dataset_id])
  @@index([dataset_id])
}

model dataset_file_hierarchy {
  parent_id Int
  child_id  Int
  parent    dataset_file? @relation(name: "parent", fields: [parent_id], references: [id], onDelete: Cascade)
  child     dataset_file? @relation(name: "child", fields: [child_id], references: [id], onDelete: Cascade)

  @@id([parent_id, child_id])
  @@index([child_id])
}

model upload_log {
  id             Int                 @id @default(autoincrement())
  status         upload_status
  files          file_upload_log[]
  initiated_at   DateTime            @default(now()) @db.Timestamp(6)
  updated_at     DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  user_id        Int
  user           user                @relation(fields: [user_id], references: [id])
  dataset_upload dataset_upload_log?
}

model dataset_upload_log {
  id            Int        @id @default(autoincrement())
  dataset_id    Int        @unique
  dataset       dataset    @relation(fields: [dataset_id], references: [id], onDelete: Cascade)
  upload_log_id Int
  upload_log    upload_log @relation(fields: [upload_log_id], references: [id], onDelete: Cascade)

  @@unique([upload_log_id])
}

model file_upload_log {
  id            Int           @id @default(autoincrement())
  name          String
  md5           String
  num_chunks    Int
  status        upload_status
  path          String?
  upload_log    upload_log?   @relation(fields: [upload_log_id], references: [id], onDelete: Cascade)
  upload_log_id Int?
}

model dataset_audit {
  id         Int      @id @default(autoincrement())
  action     String
  timestamp  DateTime @default(now())
  old_data   Json?
  new_data   Json?
  user_id    Int?
  user       user?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  dataset_id Int?
  dataset    dataset? @relation(fields: [dataset_id], references: [id], onDelete: Cascade)
}

model dataset_state {
  state      String
  timestamp  DateTime @default(now()) @db.Timestamp(6)
  metadata   Json?
  dataset_id Int
  dataset    dataset? @relation(fields: [dataset_id], references: [id], onDelete: Cascade)

  @@id([timestamp, dataset_id, state])
}

model bundle {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  name       String
  size       BigInt?
  md5        String
  dataset_id Int      @unique
  dataset    dataset  @relation(fields: [dataset_id], references: [id], onDelete: Cascade)
}

model data_access_log {
  id           Int           @id @default(autoincrement())
  timestamp    DateTime      @default(now()) @db.Timestamp(6)
  access_type  access_type
  file_id      Int?
  dataset_file dataset_file? @relation(fields: [file_id], references: [id])
  dataset_id   Int?
  dataset      dataset?      @relation(fields: [dataset_id], references: [id])
  user_id      Int
  user         user          @relation(fields: [user_id], references: [id])
}

model stage_request_log {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now()) @db.Timestamp(6)
  dataset_id Int?
  dataset    dataset? @relation(fields: [dataset_id], references: [id])
  user_id    Int
  user       user     @relation(fields: [user_id], references: [id])
}

model user {
  id                         Int                 @id @default(autoincrement())
  username                   String              @unique @db.VarChar(100)
  name                       String?             @db.VarChar(100)
  email                      String              @unique @db.VarChar(100)
  cas_id                     String?             @unique @db.VarChar(100)
  notes                      String?
  created_at                 DateTime            @default(now()) @db.Timestamp(6)
  updated_at                 DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  is_deleted                 Boolean             @default(false)
  user_role                  user_role[]
  settings                   user_settings?
  contacts                   contact[]
  dataset_audit              dataset_audit[]
  projects                   project_user[]      @relation("project_user_user")
  password                   user_password?
  login                      user_login?
  accesses                   data_access_log[]
  stage_requests             stage_request_log[]
  about_edits                about[]
  project_users_assigned     project_user[]      @relation("project_user_assignor")
  project_datasets_assigned  project_dataset[]
  project_contacts_assigned  project_contact[]
  initiated_workflows        workflow[]          @relation("initiated_workflows")
  acknowledged_notifications notification[]
  uploads                    upload_log[]
  user_notifications         user_notification[]
}

model user_password {
  id         Int      @id @default(autoincrement())
  password   String   @db.VarChar(100)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(6)
  user_id    Int      @unique
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_login {
  id         Int      @id @default(autoincrement())
  last_login DateTime @default(now()) @db.Timestamp(6)
  method     String
  user_id    Int      @unique
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_settings {
  id       Int  @id @default(autoincrement())
  user_id  Int  @unique
  settings Json
  users    user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model notification {
  id                 Int                 @id @default(autoincrement())
  created_at         DateTime            @default(now()) @db.Timestamp(6)
  label              String
  text               String?
  status             NOTIFICATION_STATUS @default(CREATED)
  acknowledged_by_id Int?
  acknowledged_by    user?               @relation(fields: [acknowledged_by_id], references: [id])
  role_notifications role_notification[]
  user_notifications user_notification[]
}

model role_notification {
  id              Int          @id @default(autoincrement())
  role_id         Int
  role            role         @relation(fields: [role_id], references: [id])
  notification_id Int
  notification    notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)

  @@unique([notification_id, role_id])
}

model user_notification {
  id              Int          @id @default(autoincrement())
  user_id         Int
  user            user         @relation(fields: [user_id], references: [id])
  notification_id Int
  notification    notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)

  @@unique([notification_id, user_id])
}

model contact {
  id          Int               @id @default(autoincrement())
  type        String
  value       String
  description String?
  user_id     Int?
  user        user?             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  projects    project_contact[]

  @@unique([type, value])
}

model role {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(50)
  description        String              @default("") @db.VarChar(255)
  user_role          user_role[]
  role_notifications role_notification[]
}

model user_role {
  user_id     Int
  role_id     Int
  roles       role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  assigned_at DateTime @default(now())

  @@id([user_id, role_id])
}

model workflow {
  id           String   @id
  dataset_id   Int?
  dataset      dataset? @relation(fields: [dataset_id], references: [id], onDelete: Cascade)
  initiator_id Int?
  initiator    user?    @relation("initiated_workflows", fields: [initiator_id], references: [id], onDelete: SetNull)
}

model metric {
  timestamp   DateTime @default(now()) @db.Timestamp(6)
  measurement String
  subject     String
  usage       BigInt?
  limit       BigInt?
  fields      Json?
  tags        Json?

  @@id([timestamp, measurement, subject])
}

model project {
  id              String            @id @default(uuid())
  slug            String            @unique
  name            String
  description     String?
  browser_enabled Boolean           @default(false)
  funding         String?
  metadata        Json?
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  users           project_user[]
  datasets        project_dataset[]
  contacts        project_contact[]
}

model project_user {
  project_id  String
  user_id     Int
  assigned_at DateTime @default(now()) @db.Timestamp(6)
  assignor_id Int?
  project     project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, name: "project_user_user")
  assignor    user?    @relation(fields: [assignor_id], references: [id], onDelete: SetNull, name: "project_user_assignor")

  @@id([project_id, user_id])
}

model project_dataset {
  project_id  String
  dataset_id  Int
  assignor_id Int?
  assigned_at DateTime @default(now()) @db.Timestamp(6)
  project     project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  dataset     dataset  @relation(fields: [dataset_id], references: [id], onDelete: Cascade)
  assignor    user?    @relation(fields: [assignor_id], references: [id], onDelete: SetNull)

  @@id([project_id, dataset_id])
}

model project_contact {
  project_id  String
  contact_id  Int
  assigned_at DateTime @default(now()) @db.Timestamp(6)
  assignor_id Int?
  project     project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  contact     contact  @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  assignor    user?    @relation(fields: [assignor_id], references: [id], onDelete: SetNull)

  @@id([project_id, contact_id])
}

model log {
  id                Int            @id @default(autoincrement())
  timestamp         DateTime       @default(now()) @db.Timestamp(6)
  message           String
  level             String
  worker_process_id Int
  worker_log        worker_process @relation(fields: [worker_process_id], references: [id], onDelete: Cascade)

  @@index([worker_process_id])
}

model worker_process {
  id          Int      @id @default(autoincrement())
  pid         Int
  task_id     String
  step        String
  workflow_id String
  tags        Json?
  start_time  DateTime @default(now()) @db.Timestamp(6)
  hostname    String
  logs        log[]
}

model about {
  id                 Int      @id @default(autoincrement())
  html               String
  created_at         DateTime @default(now()) @db.Timestamp(6)
  last_updated_by    user     @relation(fields: [last_updated_by_id], references: [id])
  last_updated_by_id Int
}

enum access_type {
  BROWSER
  SLATE_SCRATCH
}

enum NOTIFICATION_STATUS {
  CREATED
  ACKNOWLEDGED
  RESOLVED
}

enum upload_status {
  UPLOADING
  UPLOAD_FAILED
  UPLOADED
  PROCESSING
  PROCESSING_FAILED
  COMPLETE
  FAILED
}

enum upload_type {
  // FILE
  // DIRECTORY
  DATASET
}
