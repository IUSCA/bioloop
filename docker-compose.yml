name: bioloop
services:

  ui:
    build:
      context: ./ui
    env_file:
      - ui/.env.example
    volumes:
      - ./ui/:/opt/sca/app
    ports:
      - 127.0.0.1:443:443
    command: npm run dev

  api:
    build:
      context: ./api
    env_file:
      - tests/.env.example
      - db/postgres/.env.example
      - api/.env.example
      - api/.env
    volumes:
      - ./api/:/opt/sca/app
    expose:
      - 3030
    command: npm run dev
    depends_on:
     - postgres

  postgres:
    image: postgres:14.5
    env_file:
      - db/postgres/.env.example
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres/scripts:/docker-entrypoint-initdb.d
      - ./db/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf 
    expose:
      - 5432
    command: -c 'config_file=/etc/postgresql/postgresql.conf'

# Workers
  celery_worker:
    # user: ${USER_ID}:${GROUP_ID}
    build:
      context: ./workers
    environment:
      - WORKER_TYPE=celery_worker
    env_file:
      - workers/.env.example
      - workers/.env
    volumes:
      - ./workers/:/opt/sca/app
      - landing_volume:/opt/sca/data
    depends_on:
      - queue
      - mongo


  # Rhythm_api containers
  queue:
    # https://hub.docker.com/_/rabbitmq/
    image: rabbitmq:4-management
    expose:
      - 5672
    ports:
      - 127.0.0.1:15672:15672
    volumes:
      - queue_volume:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_DEFAULT_VHOST=myvhost

  mongo:
    # https://hub.docker.com/_/mongo
    image: mongo:5
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_db:/data/db
      # for importing database files
      - ./rhythm_api/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  rhythm:
    restart: unless-stopped
    build:
      context: ./rhythm_api
    expose:
      - 5001
    env_file:
      - rhythm_api/.env.example
    environment:
      - PORT=5001
    volumes:
      - ./rhythm_api:/opt/sca
    depends_on:
      - queue
      - mongo

# Secure_download containers
  secure_download:
    # user: ${USER_ID}:${GROUP_ID}
    build:
      context: ./secure_download
    restart: unless-stopped
    expose:
      - 3080
    env_file:
      - secure_download/.env.example
    volumes:
      - landing_volume:/opt/sca/data

# Signet containers
  signet:
    restart: unless-stopped
    build:
      context: ./signet
    expose:
      - 5050
    environment:
      - PORT=5050
      - AUTHLIB_INSECURE_TRANSPORT=1
      - POSTGRES_DB=signet
      - POSTGRES_USER=signet
      - POSTGRES_PASSWORD=example
      - POSTGRES_HOST=signet_db
      - POSTGRES_PORT=5432
    env_file:
      - signet/.env.example
    depends_on:
      - postgres

  signet_db:
    image: postgres:14.5
    restart: unless-stopped
    environment:
      - POSTGRES_DB=signet
      - POSTGRES_USER=signet
      - POSTGRES_PASSWORD=example
      - POSTGRES_SCHEMA=signet
      - POSTGRES_PORT=5432
    volumes:
      - signet_db:/var/lib/postgresql/data
    expose:
      - 5432



# Metrics containers
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://appuser:example@postgres:5432/app?sslmode=disable"
    depends_on:
      - postgres
    # ports:
      # - "9187:9187"
    volumes:
      - ./metrics/postgres_exporter/queries.yml:/etc/postgres_exporter/queries.yml
    command:
      - "--extend.query-path=/etc/postgres_exporter/queries.yml"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./metrics/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Mount the volume for Prometheus data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # ports:
      # - "9090:9090"

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana                   # Mount for Grafana data (dashboards, plugins)
      - ./metrics/grafana/config:/etc/grafana           # Mount for custom Grafana configuration
      - ./api/keys/auth.pub:/etc/grafana/auth.pub
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

      

volumes:
  postgres_data:
    external: false
  grafana_data:
    external: false
  prometheus_data:
    external: false
  mongo_db:
    external: false
  queue_volume:
    external: false
  signet_db:
    external: false
  landing_volume:
    external: false