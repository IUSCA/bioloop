name: bioloop
services:
  ui:
    image: node:21
    volumes:
      - ./ui/:/opt/sca/app
      - ui_modules:/opt/sca/app/node_modules
    ports:
      - 127.0.0.1:443:443
    working_dir: /opt/sca/app
    # command: sh -c "npm install && exec /opt/sca/app/node_modules/.bin/vite --host"
    # entrypoint: [ "tail", "-f", "/dev/null" ]
    entrypoint:
      - sh
      - -c
      - |
        npm install && exec /opt/sca/app/node_modules/.bin/vite --host

  api:
    image: node:21
    volumes:
      - ./api/:/opt/sca/app
      - api_modules:/opt/sca/app/node_modules
    expose:
      - 3030
    ports:
      - 127.0.0.1:3030:3030
    working_dir: /opt/sca/app
    # entrypoint: ["tail", "-f", "/dev/null"]
    entrypoint:
      - sh
      - -c
      - |
        npm install \
        && npx prisma generate client \
        && exec /opt/sca/app/node_modules/.bin/nodemon --signal SIGTERM src/index.js


    extra_hosts:
      - "host.docker.internal:host-gateway" # for connecting to services running on localhost of the host network
    depends_on:
     - postgres

  postgres:
    image: postgres:14.5
    environment:
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=app
    volumes:
      - ./db/db_postgres:/var/lib/postgresql/data
      - ./db/postgres/scripts:/docker-entrypoint-initdb.d
      - ./db/postgres/aux_scripts:/opt/sca/scripts
      - ./db/backups:/opt/sca/backups
      - ./db/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf   # Mount the config file
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - 127.0.0.1:5432:5432
    expose:
      - 5432

  # nginx:
  #   image: nginx:1.25
  #   ports:
  #       - 80:80
  #       - 443:443
  #   volumes:
  #       - ./nginx/src:/usr/share/nginx/html     # Mount for Nginx static files
  #       - ./nginx/conf:/etc/nginx/conf.d        # Mount for Nginx configuration files
  #       - ./data:/opt/sca/data:ro               # Mount for data directory
  #       - ./ui/dist:/opt/sca/ui:ro              # Mount for UI static files
  #       - ./nginx/logs:/var/log/nginx           # Mount for Nginx logs
  #       - ./ui/.cert:/etc/nginx/certs:ro       # Mount for SSL certificates
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway" # for connecting to services running on localhost of the host network

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://appuser:example@postgres:5432/app?sslmode=disable"
    depends_on:
      - postgres
    # ports:
      # - "9187:9187"
    volumes:
      - ./metrics/postgres_exporter/queries.yml:/etc/postgres_exporter/queries.yml
    command:
      - "--extend.query-path=/etc/postgres_exporter/queries.yml"
    profiles:
      - metrics

  prometheus:
    image: prom/prometheus
    volumes:
      - ./metrics/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Mount the volume for Prometheus data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # ports:
      # - "9090:9090"
    profiles:
      - metrics

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana                   # Mount for Grafana data (dashboards, plugins)
      - ./metrics/grafana/config:/etc/grafana           # Mount for custom Grafana configuration
      - ./api/keys/auth.pub:/etc/grafana/auth.pub
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    profiles:
      - metrics

  docs:
    image: node:21
    volumes:
      - ./package.json:/opt/sca/app/package.json
      - ./package-lock.json:/opt/sca/app/package-lock.json
      - ./docs/:/opt/sca/app/docs
      - docs_modules:/opt/sca/app/node_modules
    ports:
      - 127.0.0.1:5173:5173
    working_dir: /opt/sca/app
    entrypoint:
      - sh
      - -c
      - |
        npm install && exec /opt/sca/app/node_modules/.bin/vitepress dev docs --host

  jupyter_ijs:
    image: darkbluestudios/jupyter-ijavascript-utils:latest
    ports:
      - "8888:8888"
    volumes:
      - ./api/notebooks:/home/jovyan/work/notebooks
      - ./api/node_modules:/home/jovyan/work/node_modules
      - ./api/package.json:/home/jovyan/work/package.json:ro
    # stdin_open: true
    # tty: true
    profiles:
      - repl

  queue:
    # https://hub.docker.com/_/rabbitmq/
    # includes web gui ?
    image: rabbitmq:3-management
    # image: rabbitmq:3
    ports:
      - 127.0.0.1:5672:5672
      - 127.0.0.1:15672:15672
    volumes:
      - queue_data:/var/lib/rabbitmq/
      # - ./db/queue/log/:/var/log/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_DEFAULT_VHOST=myvhost
    profiles:
      - workers

  mongo:
    # https://hub.docker.com/_/mongo
    image: mongo:5
    ports:
      # helpful for using a GUI client like compass for troubleshooting
      - 127.0.0.1:27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: celery
    volumes:
      - mongo_data:/data/db
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      # for importing database files
      # - ./db/mongodump:/opt/sca/app/mongodump
    profiles:
      - workers

  workers:
    build:
      context: ./workers
    volumes:
      - worker_state:/app/state
      - ./workers/workers:/app/workers   # code is mounted
      - ./workers/tests:/app/tests   # tests are mounted
      - ./workers/notebooks:/app/notebooks   # notebooks are mounted
      - ./data/workers:/data
    ports:
      - 127.0.0.1:8898:8888
    env_file:
      - ./workers/.env
    entrypoint: ["sh", "workers/scripts/entrypoint.sh"]
    depends_on:
      - queue
      - mongo
    profiles:
      - workers
    stop_grace_period: 30s

  watch:
    build:
      context: ./workers
    env_file:
      - ./workers/.env
    volumes:
      - ./workers/workers:/app/workers   # code is mounted
      - ./data/workers:/data
    entrypoint: ["python", "-u", "-m", "workers.scripts.watch"]
    depends_on:
      - api
    profiles:
      - workers

  rhythm_api:
    image: deepakduggi/rhythm-api:latest
    ports:
      - 127.0.0.1:5001:5001
    environment:
      - PORT=5001
    depends_on:
      - queue
      - mongo
    profiles:
      - workers



volumes:
  ui_modules:
    external: false

  api_modules:
    external: false

  grafana_data:
  prometheus_data:
  docs_modules:
  worker_state:
  queue_data:
  mongo_data: