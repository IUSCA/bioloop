name: bioloop
services:
  ui:
    restart: unless-stopped
    image: node:19
    volumes:
      - ./ui/:/opt/sca/app
      - ui_modules:/opt/sca/app/node_modules
    working_dir: /opt/sca/app
    entrypoint:
      - sh
      - -c
      - |
        npm install && exec npm run builddev
    

  api:
    restart: unless-stopped
    build:
      context: ./api
      args:
        APP_UID: ${APP_UID} # read from .env file
        APP_GID: ${APP_GID} # read from .env file
    volumes:
      - ./api/:/opt/sca/app
      - api_modules:/opt/sca/app/node_modules
      - ${FILESYSTEM_BASE_DIR_SCRATCH}:${FILESYSTEM_MOUNT_DIR_SCRATCH}
      - ${FILESYSTEM_BASE_DIR_PROJECT}:${FILESYSTEM_MOUNT_DIR_PROJECT}
    expose:
      - 3030
    # entrypoint: [ "tail", "-f", "/dev/null" ]
    depends_on:
     - postgres
    networks:
      network:
        ipv4_address: 172.19.0.2


  postgres:
    image: postgres:14.5
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db/prod/db_postgres:/var/lib/postgresql/data
      - ./db/postgres/scripts:/docker-entrypoint-initdb.d
      - ./db/postgres/aux_scripts:/opt/sca/scripts
      - ./db/backups:/opt/sca/backups
    expose:
      - 5432
    networks:
      network:
        ipv4_address: 172.19.0.3

# sudo docker compose -f "docker-compose-prod.yml" run --rm pgbackup
  pgbackup:
    image: postgres:14.5
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PROJ_NAME=${COMPOSE_PROJECT_NAME}
    volumes:
      - /opt/sca/postgres_backups:/backup
    networks:
      - network
    command: >
      bash -c "pg_dump -w -f /backup/$${PROJ_NAME}_postgres_backup.$$(date +%F).psql --username=$$POSTGRES_USER --host=postgres --dbname=$$POSTGRES_DB"

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      - postgres
    # ports:
      # - "9187:9187"
    volumes:
      - ./metrics/postgres_exporter/queries.yml:/etc/postgres_exporter/queries.yml
    command:
      - "--extend.query-path=/etc/postgres_exporter/queries.yml"
    networks:
      network:
        ipv4_address: 172.19.0.7
  
  prometheus:
    image: prom/prometheus
    volumes:
      - ./metrics/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Mount the volume for Prometheus data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # ports:
      # - "9090:9090"
    networks:
      network:
        ipv4_address: 172.19.0.6
  
  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana                   # Mount for Grafana data (dashboards, plugins)
      - ./metrics/grafana/config:/etc/grafana           # Mount for custom Grafana configuration
      - ./api/keys/auth.pub:/etc/grafana/auth.pub
    # ports:
    #   - "3000:3000"
    depends_on:
      - postgres_exporter
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    networks:
      network:
        ipv4_address: 172.19.0.5

volumes:
  ui_modules:
    external: false

  api_modules:
    external: false

  grafana_data:
  prometheus_data:

networks:
  network:
    ipam:
      config:
        - subnet: 172.19.0.0/24