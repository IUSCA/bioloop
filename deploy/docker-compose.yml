name: bioloop
services:
  nginx:
    image: nginx:1.27.3
    volumes:
      - ui_modules:/usr/share/nginx/html
      - /opt/sca/nginx/certbot/conf:/etc/letsencrypt
      - /opt/sca/nginx/certbot/www:/var/www/certbot
      - ../nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      # Script to autoreload Nginx when certs are renewed
      - ../nginx/bin/99-autoreload.sh:/docker-entrypoint.d/99-autoreload.sh  
    env_file:
      - nginx.env
    ports:
      - 80:80
      - 443:443
    expose:
      - 8000
    depends_on:
      - api
    networks:
      network:
        ipv4_address: 172.20.0.2
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # https://dev.to/marrouchi/the-challenge-about-ssl-in-docker-containers-no-one-talks-about-32gh
  # https://eff-certbot.readthedocs.io/en/latest/install.html#alternative-1-docker
  # https://hub.docker.com/r/certbot/certbot
  certbot:
    image: certbot/certbot
    env_file:
      - nginx.env
    volumes:
      - /opt/sca/nginx/certbot/conf:/etc/letsencrypt
      - /opt/sca/nginx/certbot/www:/var/www/certbot
    # Renew certificates every 12 hours
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot --force-renewal --cert-name $APP_DOMAIN renew; sleep 12h & wait $${!}; done;'"
    networks:
      network:
        ipv4_address: 172.20.0.14

  ui:
    image: git.sca.iu.edu:5050/${PROJECT_NAME}/ui:latest
    env_file:
      - ui.env
    volumes:
      - ui_modules:/opt/sca/app/dist
    depends_on:
      - api
    restart: "no"
    entrypoint:
      - sh
      - -c
      - |
        mkdir .cert \
        && cd .cert \
        && openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/C=US/ST=IN/L=Bloomington/O=IU/OU=SCA/CN=localhost" \
        && cd .. \
        && npm run build
    networks:
      network:
        ipv4_address: 172.20.0.3

  api:
    image: git.sca.iu.edu:5050/${PROJECT_NAME}/api:latest
    entrypoint:
      - sh
      - -c
      - |
        cd keys \
        && ./genkeys.sh \
        && cd .. \
        && npx prisma generate \
        && npm run start
    env_file:
      - api.env
      - db.env
    expose:
      - 3030
    depends_on:
     - postgres
    networks:
      network:
        ipv4_address: 172.20.0.4

  postgres:
    image: postgres:14.5
    restart: unless-stopped
    env_file:
      - db.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      network:
        ipv4_address: 172.20.0.5

  # pgbackup:
  #   image: postgres:14.5
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - PGPASSWORD=${POSTGRES_PASSWORD}
  #     - PROJ_NAME=${COMPOSE_PROJECT_NAME}
  #   volumes:
  #     - postgres_backups:/backup
  #   networks:
  #     - network
  #   command: >
  #     bash -c "pg_dump -w -f /backup/$${PROJ_NAME}_postgres_backup.$$(date +%F).psql --username=$$POSTGRES_USER --host=postgres --dbname=$$POSTGRES_DB"
    # networks:
    #   network:
    #     ipv4_address: 172.20.0.6

  workers:
    image: git.sca.iu.edu:5050/${PROJECT_NAME}/workers:latest
    env_file:
      - workers.env
    depends_on:
      - queue
      - mongo
    networks:
      network:
        ipv4_address: 172.20.0.13


  #  This is only for rhythm_api
  queue:
    # https://hub.docker.com/_/rabbitmq/
    # includes web gui ?
    image: rabbitmq:3-management
    # image: rabbitmq:3
    ports:
      - 127.0.0.1:5672:5672
      - 127.0.0.1:15672:15672
    volumes:
      - queue_data:/var/lib/rabbitmq/
      # - ./db/queue/log/:/var/log/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_DEFAULT_VHOST=myvhost
    networks:
      network:
        ipv4_address: 172.20.0.12

  mongo:
    # https://hub.docker.com/_/mongo
    image: mongo:5
    ports:
      # helpful for using a GUI client like compass for troubleshooting
      - 127.0.0.1:27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
      # for importing database files
      - mongo_dump:/opt/sca/app/mongodump
    networks:
      network:
        ipv4_address: 172.20.0.11


  rhythm:
    restart: unless-stopped
    build:
      context: ../rhythm_api
    expose:
      - 5001
    ports:
      - 5001:5001
    env_file:
      - rhythm.env
    volumes:
      - ../rhythm_api:/opt/sca
    depends_on:
      - queue
      - mongo
    networks:
      network:
        ipv4_address: 172.20.0.10

  # This is only for secure_download
  secure_download:
    image: git.sca.iu.edu:5050/${PROJECT_NAME}/secure_download:latest
    restart: unless-stopped
    expose:
      - 3080
    env_file:
      - secure_download.env
    volumes:
      - /opt/sca/data:/opt/sca/data
    networks:
      network:
        ipv4_address: 172.20.0.9

  signet:
    restart: unless-stopped
    build:
      context: ../signet
    expose:
      - 5001
    environment:
      - PORT=5001
      - AUTHLIB_INSECURE_TRANSPORT=1
      - POSTGRES_DB=${SIGNET_DB}
      - POSTGRES_USER=${SIGNET_USER}
      - POSTGRES_PASSWORD=${SIGNET_PASSWORD}
      - POSTGRES_HOST=${SIGNET_DB_HOST}
      - POSTGRES_PORT=5432
    env_file:
      - signet.env
    volumes:
      - ../signet:/opt/sca
    depends_on:
      - postgres
    networks:
      network:
        ipv4_address: 172.20.0.7

  signet_db:
    image: postgres:14.5
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${SIGNET_DB}
      - POSTGRES_USER=${SIGNET_USER}
      - POSTGRES_PASSWORD=${SIGNET_PASSWORD}
      - POSTGRES_SCHEMA=signet
      - POSTGRES_PORT=5432
    volumes:
      - signet_data:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      network:
        ipv4_address: 172.20.0.8

volumes:
  ui_modules:
    external: false
  postgres_data:
    external: false
  postgres_scripts:
    external: false
  mongo_data:
    external: false
  mongo_dump:
    external: false
  queue_data:
    external: false
  signet_data:
    external: false
  # postgres_backups:
  #   external: false

networks:
  network:
    ipam:
      config:
        - subnet: 172.20.0.0/24